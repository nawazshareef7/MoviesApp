d5e694376927eb740c1ad424d3b292c8









'use strict';var _jsxFileName = "D:\\MoviesApp\\node_modules\\react-native\\Libraries\\Lists\\FlatList.js";function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






































































































































































































































var defaultProps = _objectSpread({},
require('./VirtualizedList').defaultProps, {
  numColumns: 1,





  removeClippedSubviews: require('../Utilities/Platform').OS === 'android' });var















































































































FlatList = function (_React$PureComponent) {_inherits(FlatList, _React$PureComponent);_createClass(FlatList, [{ key: "scrollToEnd", value: function scrollToEnd(





    params) {
      if (this._listRef) {
        this._listRef.scrollToEnd(params);
      }
    } }, { key: "scrollToIndex", value: function scrollToIndex(









    params)




    {
      if (this._listRef) {
        this._listRef.scrollToIndex(params);
      }
    } }, { key: "scrollToItem", value: function scrollToItem(







    params)



    {
      if (this._listRef) {
        this._listRef.scrollToItem(params);
      }
    } }, { key: "scrollToOffset", value: function scrollToOffset(






    params) {
      if (this._listRef) {
        this._listRef.scrollToOffset(params);
      }
    } }, { key: "recordInteraction", value: function recordInteraction()






    {
      if (this._listRef) {
        this._listRef.recordInteraction();
      }
    } }, { key: "flashScrollIndicators", value: function flashScrollIndicators()






    {
      if (this._listRef) {
        this._listRef.flashScrollIndicators();
      }
    } }, { key: "getScrollResponder", value: function getScrollResponder()




    {
      if (this._listRef) {
        return this._listRef.getScrollResponder();
      }
    } }, { key: "getScrollableNode", value: function getScrollableNode()

    {
      if (this._listRef) {
        return this._listRef.getScrollableNode();
      }
    } }, { key: "setNativeProps", value: function setNativeProps(

    props) {
      if (this._listRef) {
        this._listRef.setNativeProps(props);
      }
    } }]);

  function FlatList(_props) {var _this;_classCallCheck(this, FlatList);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(FlatList).call(this, _props));_this.















































    _virtualizedListPairs = [];_this.

    _captureRef = function (ref) {
      _this._listRef = ref;
    };_this.






























    _getItem = function (data, index) {var
      numColumns = _this.props.numColumns;
      if (numColumns > 1) {
        var ret = [];
        for (var kk = 0; kk < numColumns; kk++) {
          var _item = data[index * numColumns + kk];
          if (_item != null) {
            ret.push(_item);
          }
        }
        return ret;
      } else {
        return data[index];
      }
    };_this.

    _getItemCount = function (data) {
      return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
    };_this.

    _keyExtractor = function (items, index) {var _this$props =
      _this.props,keyExtractor = _this$props.keyExtractor,numColumns = _this$props.numColumns;
      if (numColumns > 1) {
        require('invariant')(
        Array.isArray(items),
        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +
        'array with 1-%s columns; instead, received a single item.',
        numColumns);

        return items.
        map(function (it, kk) {return keyExtractor(it, index * numColumns + kk);}).
        join(':');
      } else {
        return keyExtractor(items, index);
      }
    };_this.





































    _renderer = function () {var _this$props2 =





      _this.props,ListItemComponent = _this$props2.ListItemComponent,renderItem = _this$props2.renderItem,numColumns = _this$props2.numColumns,columnWrapperStyle = _this$props2.columnWrapperStyle;

      var virtualizedListRenderKey = ListItemComponent ?
      'ListItemComponent' :
      'renderItem';

      var renderer = function renderer(props) {
        if (ListItemComponent) {
          return require('react').createElement(ListItemComponent, _extends({}, props, { __source: { fileName: _jsxFileName, lineNumber: 633 } }));
        } else if (renderItem) {
          return renderItem(props);
        } else {
          return null;
        }
      };

      return _defineProperty({},
      virtualizedListRenderKey, function (info) {
        if (numColumns > 1) {var
          _item2 = info.item,_index = info.index;
          require('invariant')(
          Array.isArray(_item2),
          'Expected array of items with numColumns > 1');

          return (
            require('react').createElement(require('../Components/View/View'), {
              style: require('../StyleSheet/StyleSheet').compose(
              styles.row,
              columnWrapperStyle), __source: { fileName: _jsxFileName, lineNumber: 650 } },

            _item2.map(function (it, kk) {
              var element = renderer({
                item: it,
                index: _index * numColumns + kk,
                separators: info.separators });

              return element != null ?
              require('react').createElement(require('react').Fragment, { key: kk, __source: { fileName: _jsxFileName, lineNumber: 662 } }, element) :
              null;
            })));


        } else {
          return renderer(info);
        }
      });

    };_this._checkProps(_this.props);if (_this.props.viewabilityConfigCallbackPairs) {_this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {return { viewabilityConfig: pair.viewabilityConfig, onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged) };});} else if (_this.props.onViewableItemsChanged) {_this._virtualizedListPairs.push({ viewabilityConfig: _this.props.viewabilityConfig, onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged) });}return _this;}_createClass(FlatList, [{ key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {require('invariant')(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');require('invariant')(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');require('invariant')(!require('../Utilities/differ/deepDiffer')(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');require('invariant')(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');this._checkProps(this.props);} }, { key: "_checkProps", value: function _checkProps(props) {var getItem = props.getItem,getItemCount = props.getItemCount,horizontal = props.horizontal,numColumns = props.numColumns,columnWrapperStyle = props.columnWrapperStyle,onViewableItemsChanged = props.onViewableItemsChanged,viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;require('invariant')(!getItem && !getItemCount, 'FlatList does not support custom data formats.');if (numColumns > 1) {require('invariant')(!horizontal, 'numColumns does not support horizontal.');} else {require('invariant')(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');}require('invariant')(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');} }, { key: "_pushMultiColumnViewable", value: function _pushMultiColumnViewable(arr, v) {var _this$props3 = this.props,numColumns = _this$props3.numColumns,keyExtractor = _this$props3.keyExtractor;v.item.forEach(function (item, ii) {require('invariant')(v.index != null, 'Missing index!');var index = v.index * numColumns + ii;arr.push(_objectSpread({}, v, { item: item, key: keyExtractor(item, index), index: index }));});} }, { key: "_createOnViewableItemsChanged", value: function _createOnViewableItemsChanged(onViewableItemsChanged) {var _this2 = this;return function (info) {var numColumns = _this2.props.numColumns;if (onViewableItemsChanged) {if (numColumns > 1) {var changed = [];var viewableItems = [];info.viewableItems.forEach(function (v) {return _this2._pushMultiColumnViewable(viewableItems, v);});info.changed.forEach(function (v) {return _this2._pushMultiColumnViewable(changed, v);});onViewableItemsChanged({ viewableItems: viewableItems, changed: changed });} else {onViewableItemsChanged(info);}}};} }, { key: "render", value: function render()

    {
      return (
        require('react').createElement(require('./VirtualizedList'), _extends({},
        this.props, {
          getItem: this._getItem,
          getItemCount: this._getItemCount,
          keyExtractor: this._keyExtractor,
          ref: this._captureRef,
          viewabilityConfigCallbackPairs: this._virtualizedListPairs },
        this._renderer(), { __source: { fileName: _jsxFileName, lineNumber: 676 } })));


    } }]);return FlatList;}(require('react').PureComponent);FlatList.defaultProps = defaultProps;


var styles = require('../StyleSheet/StyleSheet').create({
  row: { flexDirection: 'row' } });


module.exports = FlatList;